% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_quick_tree.r
\name{plot_quick_tree}
\alias{plot_quick_tree}
\title{Plot Quick Phylogenetic Tree}
\usage{
plot_quick_tree(
  sillyvec,
  loci,
  inputfile,
  popnames = NULL,
  ncores = 4,
  groupvec = NULL,
  regioncol = NULL,
  cex = 1
)
}
\arguments{
\item{sillyvec}{a vector of silly codes without the ".gcl" extension.}

\item{loci}{a vector of locus names.}

\item{inputfile}{the file path of the genepop input file including the .txt extension. If the file does not exist, then one will be created.}

\item{popnames}{an optional vector of population names corresponding to \code{sillyvec} in order to add them as the dimnames of the output matrix. If not supplied, \code{sillyvec} will be used as the dimnames.}

\item{ncores}{a numeric value indicating the number of cores to use}

\item{groupvec}{a numeric vector indicating the group affiliation for each population in \code{sillyvec}}

\item{regioncol}{a vector of colors of the same length as max(\code{groupvec}) (i.e., the number of groups). The colors can be hexadecimal, R color names, or the number corresponding to an R color name in \code{\link[=colors]{colors()}}.}

\item{cex}{a numeric value giving the factor scaling of the tip labels (Character Expansion).}
}
\value{
a neighbor-joining phylogram based on pairwise Fst values.
}
\description{
This function quickly creates a neighbor-joining Fst tree using the \pkg{genepop} and \pkg{ape} packages.
}
\examples{

groupvec <- GCLr::ex_baseline \%>\%
  dplyr::group_by(collection) \%>\%
  dplyr::filter(dplyr::row_number()==1) \%>\%
  dplyr::pull(repunit) \%>\%
  factor() \%>\%
  as.numeric()

sillyvec <- GCLr::base2gcl(ex_baseline)

loci <- GCLr::ex_baseline[,-c(1:5)] \%>\%
  names() \%>\%
  gsub(pattern = "*\\\\.1", x = ., replacement = "") \%>\%
  unique()

 GCLr::plot_quick_tree(sillyvec = sillyvec, loci = loci, inputfile = system.file("genepop", "ex_genepop.txt", package = "GCLr"), popnames = paste0("Pop", seq(sillyvec)), ncores = parallel::detectCores(), groupvec = groupvec, regioncol = c("red", "green", "blue"), cex = 0.75)

}
