% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hierfstat_global_stats.r
\name{hierfstat_global_stats}
\alias{hierfstat_global_stats}
\title{Compute global hierarchical F-statistics and variance components.}
\usage{
hierfstat_global_stats(levels, genotypes, LocusControl = LocusControl)
}
\arguments{
\item{levels}{A data frame containing the different levels (factors) from the outermost (e.g., region) to the innermost before the individual.}

\item{genotypes}{A data frame containing the genotypes in single-column numeric format (e.g., 101, 102, 202).}

\item{LocusControl}{an object created by \code{\link[=create_locuscontrol]{create_locuscontrol()}}}
}
\value{
A list containing 3 tibbles:
\itemize{
\item \code{loci} - variance components by locus,
\item \code{overall} - variance components summed over all loci,
\item \code{F} - hierarchical F-statistics (see \code{\link[hierfstat:varcomp.glob]{hierfstat::varcomp.glob()}} documentation).
}
}
\description{
This is a wrapper function for \code{\link[hierfstat:varcomp.glob]{hierfstat::varcomp.glob()}}. This wrapper will compute variance components and hierarchical F-statistics for haploid and diploid loci and combine the results into a single output.
}
\examples{
newbase <- GCLr::baseline \%>\% tidyr::separate(indiv, into = c("collection", NA), remove = FALSE)

sillyvec <- GCLr::base2gcl(newbase)

pop <- newbase \%>\%
  dplyr::group_by(collection) \%>\%
  dplyr::filter(dplyr::row_number()==1) \%>\%
  dplyr::pull(repunit) \%>\%
  factor() \%>\%
  as.numeric()

region <- newbase \%>\%
  dplyr::group_by(collection) \%>\%
  dplyr::filter(dplyr::row_number()==1) \%>\% 
  dplyr::mutate(region = dplyr::case_when(repunit == "KenaiOther"~1,
                                          TRUE~2)) \%>\%
  dplyr::pull(region)

loci <- GCLr::baseline[,-c(1:5)] \%>\%
  names() \%>\%
  gsub(pattern = "*\\\\.1", x = ., replacement = "") \%>\%
  unique()

fstat.dat <- GCLr::create_hierfstat_data(sillyvec = sillyvec, region = region, pop = pop, loci = loci, ncores = 4, LocusControl = GCLr::ex_LocusControl) \%>\% 
  dplyr::mutate(region = factor(region), pop = factor(pop), spop = factor(spop))

hierfstat_global_stats(levels = fstat.dat[ ,1:3], genotypes = fstat.dat[ ,-c(1:3)])

}
