% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/custom_comb_msgsi_output.r
\name{custom_comb_msgsi_output}
\alias{custom_comb_msgsi_output}
\title{Custom Combine \pkg{Ms.GSI} Output}
\usage{
custom_comb_msgsi_output(
  mdl_out = NULL,
  path = NULL,
  mix = NULL,
  new_pop_info,
  group_names_new = NULL,
  nreps = NULL,
  nburn = NULL,
  thin = NULL,
  nchains = NULL,
  keep_burn = NULL
)
}
\arguments{
\item{mdl_out}{Output list object from \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}.}

\item{path}{Path to \pkg{Ms.GSI} directory containing \code{mix} folder with output .csv files specified by \code{file_path} argument in \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}.}

\item{mix}{Character vector of length 1 with mixture silly, used to read in output .csv files if \code{mdl_out = NULL}.}

\item{new_pop_info}{Tibble with 2 columns: \code{repunit} with existing fine-scale groups and \code{new_repunit} for rolled up broad-scale groups.
Same object as \code{\link[Ms.GSI:stratified_estimator_msgsi]{Ms.GSI::stratified_estimator_msgsi()}} input.}

\item{group_names_new}{Optional character vector of new group_names for ordering as factor.}

\item{nreps}{Total number of iterations (includes burn-ins) used in \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}. Only used if not providing \code{path} to folder containing output .csv files.}

\item{nburn}{Number of warm-up iterations used in \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}. Only used if not providing \code{path} to folder containing output .csv files.}

\item{thin}{Frequency to thin iterations in the output used in \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}. Only used if not providing \code{path} to folder containing output .csv files.}

\item{nchains}{Number of independent MCMC chains used in \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}. Only used if not providing \code{path} to folder containing output .csv files.}

\item{keep_burn}{Boolean to save the burn-in iterations or not used in \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}, default is \code{FALSE}. Only used if not providing \code{path} to folder containing output .csv files.}
}
\value{
A tibble with 9 fields.
\itemize{
\item \code{group}: Character vector of reporting groups specified in \code{new_pop_info$new_repunit} (factor for ordering, plotting purposes if \code{group_names_new} provided).
\item \code{mean}: Mean stock composition.
\item \code{median}: Median stock composition.
\item \code{sd}: Standard deviation.
\item \code{ci.05}: Lower bound of 90\% credibility interval.
\item \code{ci.95}: Upper bound of 90\% credibility interval.
\item \code{P=0}: The proportion of the stock comp distribution that was below "threshold", either 5e-7 or ~1/2 fish if \code{harvest} is provided (i.e., posterior probability that stock comp = 0).
\item \code{GR}: Gelman-Rubin diagnostic used to assess convergence among MCMC chains, GCL standard is < 1.2.
\item \code{n_eff}: Effective sample size is an estimate of independent sample size of the posterior sample and is used to assess MCMC convergence. No official "threshold", but generally larger is better.
}
}
\description{
This function computes summary statistics from \pkg{Ms.GSI} output, similar to \code{custom_comb_rubias_output()}.
It is primarily used to "roll up" reporting groups from fine-scale to broad-scale.
Output is a single tibble with \code{mixture} as a column. It can take either the \code{mdl_out} list
object from \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}, OR it can read in the .csv output files created by \code{\link[Ms.GSI:msgsi_mdl]{Ms.GSI::msgsi_mdl()}}.
}
\examples{
\dontrun{
AY_2024_GAPS_comparison_34RG_msgsi_estimates <- sapply(AY_2024_GAPS_comparison_mixnames, function(mix) {
custom_comb_msgsi_output(
 path = "msgsi/output/",
 mix = mix,
 new_pop_info = GTseq_GAPS_RG_conversion \%>\% 
   dplyr::select(repunit = `58_SEAK_CW_AK`, new_repunit = hybrid_GAPS_33_pub) \%>\% 
   dplyr::distinct(),
 group_names_new = groups_33_gaps_33
) \%>\%
 dplyr::mutate(mixture = mix) \%>\%
 dplyr::relocate(mixture)
}, simplify = FALSE) \%>\%
 dplyr::bind_rows() \%>\% 
 dplyr::mutate(mixture = factor(x = mixture, levels = AY_2024_GAPS_comparison_mixnames))
}

}
