% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dupcheck_within_silly.r
\name{dupcheck_within_silly}
\alias{dupcheck_within_silly}
\title{Check for Duplicate Individuals within Each Silly}
\usage{
dupcheck_within_silly(
  sillyvec,
  loci = LocusControl$locusnames,
  quantile = NULL,
  minnonmissing = 0.6,
  minproportion = 0.95,
  ncores = 4,
  LocusCtl = LocusControl
)
}
\arguments{
\item{sillyvec}{A vector of silly codes without the ".gcl" extension.}

\item{loci}{A vector of locus names. If set to NULL, all loci in the ".gcl" objects will be used.}

\item{quantile}{This argument, along with \code{minproportion}, is used together to determine the cut-off proportion at which a pair of duplicates is defined. Setting "quantile" to NULL will skip the calculation of the duplication distribution and run faster.}

\item{minnonmissing}{The proportion of loci that a pair must share non-missing data in order to be reported.}

\item{minproportion}{The proportion of shared non-missing loci that must be shared between individuals to be reported as a matching pair. This is passed through to \link{rubias} as well.}

\item{ncores}{The number of cores to use in a \link[foreach:foreach]{foreach::\%dopar\%} loop. If the number of cores exceeds the number on your device, then \code{ncores} defaults to \code{\link[parallel:detectCores]{parallel::detectCores()}}.}

\item{LocusCtl}{An object created by \link{create_locuscontrol}. Default is \emph{LocusControl}.}
}
\value{
When \code{quantile} is set to NULL, returns a tibble of duplicate pairs of individuals by silly.
When quantile is a number, returns a list containing a tibble of duplicate pairs of individuals by silly
and a tibble with the proportion of duplication for each pair of individuals.
}
\description{
This function checks for duplicate individuals within each silly in the provided vector "sillyvec".
}
\details{
When quantile is set to NULL, this function utilizes \code{\link[rubias:close_matching_samples]{rubias::close_matching_samples()}} to perform the duplicate check, and it is much faster than when you set a quantile.
}
\examples{
\dontrun{
# Set up required objects
password <- "password"
username <- "username"
create_locuscontrol(markersuite = "Sockeye2011_96SNPs", username = username, password = password)
sillyvec <- c("SMCDO03", "SNEVA13")
GCLr::loki2r(sillyvec = sillyvec, username = username, password = password)
GCLr::remove_ind_miss_loci(sillyvec = sillyvec)
GCLr::pool_collections(c("SMCDO03", "SNEVA13"))

# Check for duplicate individuals
dupcheck <- GCLr::dupcheck_within_silly(sillyvec = sillyvec, loci = LocusControl$locusnames, quantile = 0.99, minproportion = 0.95, ncores = 4)
dupcheckNULLQuantile <- GCLr::dupcheck_within_silly(sillyvec = sillyvec, loci = LocusControl$locusnames, quantile = NULL, minnonmissing = 0.6, minproportion = 0.95, ncores = 4)
}

}
