% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IA_thresholds.R
\name{IA_thresholds}
\alias{IA_thresholds}
\title{Get assignment threshold by reporting group}
\usage{
IA_thresholds(
  input,
  tpr_cutoff = 0.8,
  pre_cutoff = 0.95,
  min_thres = 0.5,
  thres_levels = seq(0.01, 0.99, by = 0.01)
)
}
\arguments{
\item{input}{the unmodified output object from \code{rubias::self_assign}}

\item{tpr_cutoff}{the true positive rate cutoff; default = 0.80}

\item{pre_cutoff}{the precision cutoff; default = 0.95}

\item{min_thres}{minimum assignment threshold to include in the output; default = 0.50}

\item{thres_levels}{a vector of assignment thresholds; \code{default = seq(0.01, 0.99, by = 0.01)}}
}
\value{
a tibble with the re
}
\description{
This function takes the unmodified output from \code{rubias::self_assign()},
calculates true positive rate and precision, and returns a tibble of minimum
and maximum assignment thresholds for filtering top individual assignment results
in order to meet the desired true positive rate and precision.
}
\details{
In an individual assignment analysis, each mixture samples is given a likelihood of assigning to each baseline reporting group.
The assignments for each sampled are filtered for the reporting group with the highest assignment (top assignment). An assignment threshold
is then used to filter out samples with lower top assignments to reduce the number of incorrect assignments. This function takes the leave-one-out
results from \code{rubias::self_assign()}and summarizes the number of true positives (TP), false negatives (FN), false positives (FP) at different assignment thresholds,
and calculates the true positive rate (TPR) and Precision at each threshold and returns a tibble of minimum and maximum assignment thresholds for
each reporting group where \code{TPR >= tpr_cutoff}, \code{Precision >= pre_cutoff}, and the \verb{assignment threshold >= min_thres}.

\itemize{
\item \eqn{TPR = TP / (TP + FN)}
\item \eqn{Precision = TP / (TP + FP)}
}
}
\examples{
input <- rubias::self_assign(reference = GCLr::ex_baseline, gen_start_col = 5)

assignment_thresholds(input = input, tpr = 0.80, pre = 0.95, min_thres = 0.50, thres_levels = seq(0.01, 0.99, by = 0.01))

}
