% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_rubias_mix.r
\name{run_rubias_mix}
\alias{run_rubias_mix}
\title{Run rubias Mixture Analysis}
\usage{
run_rubias_mix(
  reference,
  mixture,
  group_names,
  gen_start_col,
  method = "MCMC",
  alle_freq_prior = list(const_scaled = 1),
  pi_prior = NA,
  pi_init = NULL,
  reps = 25000,
  burn_in = 5000,
  pb_iter = 100,
  prelim_reps = NULL,
  prelim_burn_in = NULL,
  sample_int_Pi = 10,
  sample_theta = TRUE,
  pi_prior_sum = 1,
  file = "rubias/output",
  seed = 56,
  nchains = 1,
  out_file_type = c("fst", "csv")[2]
)
}
\arguments{
\item{reference}{A data frame containing the reference samples (i.e., baseline object).}

\item{mixture}{A data frame containing the mixture samples.}

\item{group_names}{A character vector specifying the names of reference groups.}

\item{gen_start_col}{An integer specifying the starting column for genotype data in the data frames.}

\item{method}{The method used for estimation. Default is "MCMC".}

\item{alle_freq_prior}{A list with a single element named 'const_scaled', specifying the constant scaling for the prior on allele frequencies. Default is 1.}

\item{pi_prior}{A data frame or tibble with two variables 'collection' and 'pi_param', specifying the prior information for mixture proportions. Default is NA.}

\item{pi_init}{A matrix or data frame with initial values for mixture proportions. Default is NULL.}

\item{reps}{An integer specifying the number of MCMC repetitions. Default is 25000.}

\item{burn_in}{An integer specifying the number of MCMC burn-in iterations. Default is 5000.}

\item{pb_iter}{An integer specifying the number of parametric bootstrap iterations. Default is 100.}

\item{prelim_reps}{An integer specifying the number of preliminary repetitions for estimating mixture proportions. Default is NULL.}

\item{prelim_burn_in}{An integer specifying the number of burn-in iterations for preliminary runs. Default is NULL.}

\item{sample_int_Pi}{An integer specifying the interval to save MCMC samples of mixture proportions. Default is 10.}

\item{sample_theta}{A logical value indicating whether to save MCMC samples for allele frequencies. Default is TRUE.}

\item{pi_prior_sum}{A numeric value specifying the sum constraint for the Dirichlet prior on mixture proportions. Default is 1.}

\item{file}{A character string representing the file path to save output. Default is "rubias/output".}

\item{seed}{An integer specifying the random seed for reproducibility. Default is 56.}

\item{nchains}{Run multiple chains for \pkg{rubias}. Default = 1 for running single \code{rubias}.}

\item{out_file_type}{The file type for the output files, either "fst" or "csv" (default: "csv")(see details).}
}
\value{
A list containing the results of the \pkg{rubias} mixture analysis, including estimated mixture proportions, allele frequencies, and other relevant information.
}
\description{
This function is a wrapper for \code{\link[rubias:infer_mixture]{rubias::infer_mixture()}}. It performs the \pkg{rubias} mixture analysis using the provided reference and mixture data frames.
The function estimates population proportions and allele frequencies for the mixture samples given the reference samples.
}
\details{
This function performs the \pkg{rubias} mixture analysis by estimating the proportions of each reference group in the mixture samples
and the allele frequencies of each reference group. It uses the provided method for estimation, such as Markov Chain Monte Carlo (MCMC)
or parametric bootstrap (PB) for uncertainty quantification. The output can be saved as .csv or .fst files for further analysis and visualization.
Using .fst files will speed up the mixture summary process in \link{custom_comb_rubias_output} because they are compressed so they read and write faster.
The only down side to using .fst files is that they cannot be visually inspected like you can with .csv files.

The \code{reference} and \code{mixture} data frames should have the same structure with matching variable names. The \code{group_names} should represent the
names of reference groups, and these names should correspond to the unique values in the \code{repunit} column of the \code{reference} data frame.

The \code{pi_prior} argument allows users to specify prior information for mixture proportions. It should be a data frame or tibble with two variables,
'collection' and 'pi_param', representing the collection name and prior parameter for the mixture proportions, respectively.

When the method is set to "PB" (parametric bootstrap), the function also saves parametric bootstrap bias corrections in separate .csv/.fst files.
}
\examples{

dir.create(path = path.expand("~/rubias/output"), recursive = TRUE)

group_names <- GCLr::ex_baseline$repunit \%>\% unique()

run_rubias_mix(reference = GCLr::ex_baseline, mixture = GCLr::ex_mixtures, group_names = group_names, gen_start_col = 5, file = path.expand("~/rubias/output"))

}
\seealso{
\code{\link{rubias::infer_mixture}}
}
