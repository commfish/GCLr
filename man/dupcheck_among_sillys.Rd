% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dupcheck_among_sillys.r
\name{dupcheck_among_sillys}
\alias{dupcheck_among_sillys}
\title{Check for Duplicate Individuals Between ".gcl" Objects}
\usage{
dupcheck_among_sillys(
  KeySillys,
  KeySillyIDs = NULL,
  BetweenSillys,
  loci,
  minnonmissing = 0.6,
  minproportion = 0.9,
  ncores = 4,
  plot.results = TRUE,
  LocusCtl = LocusControl
)
}
\arguments{
\item{KeySillys}{A character vector of silly codes without the ".gcl" extension. These are the sillys with the fish IDs that might be duplicated in \code{BetweenSillys}}

\item{KeySillyIDs}{A named list of character vectors containing FK_FISH_IDs for each silly code in \code{KeySillys} to check against all silly codes in \code{BetweenSillys}. If NULL, all FK_FISH_IDs for each silly code in \code{KeySillys} are checked against all silly codes in \code{BetweenSillys}.}

\item{BetweenSillys}{A character vector of silly codes without the ".gcl" extension. These are the sillys that may contain duplicates.}

\item{loci}{A character vector of locus names. If set to NULL, all loci in the ".gcl" objects will be used.}

\item{minnonmissing}{The proportion of loci that a pair must share non-missing genotypes in order to be reported.}

\item{minproportion}{The proportion of shared non-missing loci that must be shared between the individuals to be reported as a matching pair.}

\item{ncores}{The number of cores to use in a \link[foreach:foreach]{foreach::\%dopar\%} loop. If the number of cores exceeds the number on your device, then \code{ncores} defaults to \code{parallel::detectCores()}.}

\item{plot.results}{Logical value indicating whether to produce histograms of duplicate rates for each silly code in \code{KeySillyIDs}.}

\item{LocusCtl}{an object created by \code{\link[=create_locuscontrol]{create_locuscontrol()}}, (default = LocusControl)}
}
\value{
A tibble that includes the duplicate individuals that exceeded \code{minproportion} or had the maximum duplicate rate, as well as duplicate individuals that came from the same original collection (i.e., project duplicates). The tibble includes the following variables:
\itemize{
\item \code{Keysillyvial}: The KeySilly_ID.
\item \code{Betweensillyvial}: The BetweenSilly_ID.
\item \code{Keymissing}: The number of loci without genotypes for each KeySilly_ID.
\item \code{Betweenmissing}: The number of loci without genotypes for each BetweenSilly_ID.
\item \code{DuplicateRate}: The proportion of duplicate genotypes between each KeySilly_ID and BetweenSilly_ID.
}
The function also prints a histogram of duplicate rates for each silly code in \code{KeySillyIDs}. Each plot has a vertical red line indicating the \code{minproportion}, and the highest duplicate rate bar is labeled with the \code{BetweenSillyIDs} with that duplicate rate. The title of each plot indicates the \code{KeySillyID} that was checked for duplicates.
}
\description{
This function checks for duplicate individuals between silly code ".gcl" objects. It is mainly used for quality control purposes.
}
\details{
This function is a wrapper for \code{\link[rubias:close_matching_samples]{rubias::close_matching_samples()}} and is intended for finding duplicate fish among sillys, mainly for lab quality control analyses to look for extraction/loading errors. To check for duplicates within a silly, use \code{\link[=dupcheck_within_silly]{dupcheck_within_silly()}}
}
\examples{
\dontrun{
  
  GCLr::dupcheck_among_sillys(KeySillys = c("KKILL06qc", "KFUNN05qc"), KeySillyIDs = list(KKILL06qc = c(101, 176), KFUNN05qc = c(9, 30)), BetweenSillys = c("KKILL05", "KKILL06", "KFUNN05", "KFUNN06"), loci = LocusControl$locusnames, minnonmissing = 0.6, minproportion = 0.9, ncores = 20) 
  
}
                                                                                                                                                                                                                                                                                                          
}
\seealso{
\code{\link[=dupcheck_within_silly]{dupcheck_within_silly()}}
}
