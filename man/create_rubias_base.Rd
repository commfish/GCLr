% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_rubias_base.r
\name{create_rubias_base}
\alias{create_rubias_base}
\title{Create rubias Baseline}
\usage{
create_rubias_base(
  sillyvec,
  loci,
  group_names,
  groupvec,
  file = "rubias/baseline",
  baseline_name,
  out_file_type = c("fst", "csv")[2]
)
}
\arguments{
\item{sillyvec}{A character vector of the silly codes for the populations to include in the baseline.}

\item{loci}{A character vector of the loci to include in the baseline.}

\item{group_names}{A character vector of reporting group names, where \code{length(group_names) == max(`groupvec`)}.}

\item{groupvec}{A numeric vector indicating the reporting group affiliation of each population in \code{sillyvec}, where \code{length(groupvec) == length(sillyvec)}.}

\item{file}{A character vector of where to save the baseline as ".csv" or ".fst" file (see details).}

\item{baseline_name}{A character vector of what to name the baseline file (see details).}

\item{out_file_type}{The file type for the output files, either "fst" or "csv" (default: "csv")(see details).}
}
\value{
A dataframe in \pkg{rubias} baseline format and writes out a ".csv" or ".fst" file of the baseline.
}
\description{
This function creates the baseline dataframe needed for \pkg{rubias}.
}
\details{
This function saves the baseline as a ".csv" or ".fst" file for posterity. .fst files are compressed and speed up the reading and writing process; however, they cannot be visually inspected. To read in the ".csv" files, use \code{readr::read_csv(file = file, col_types = cols(.default = "c")} to make sure all columns are character vectors (if homozygous for T, it will become a logical vector).
}
\examples{
sillyvec <- GCLr::base2gcl(GCLr::ex_baseline)

groupvec <- GCLr::ex_baseline \%>\%
   dplyr::group_by(collection) \%>\%
   dplyr::summarize(group = unique(repunit)) \%>\%
   dplyr::mutate(group = factor(group) \%>\% as.numeric()) \%>\%
   dplyr::pull(group)

loci <- GCLr::ex_baseline[,-c(1:5)] \%>\%
   names() \%>\%
   gsub(pattern = "*\\\\.1", x = ., replacement = "") \%>\%
   unique()

group_names <- GCLr::ex_baseline$repunit \%>\% unique()

GCLr::create_rubias_base(sillyvec = sillyvec, loci = loci, group_names = group_names, groupvec = groupvec, file =  path.expand("~"), baseline_name = "my_baseline")#saves tree to documents folder

}
