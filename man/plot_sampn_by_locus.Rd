% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_sampn_by_locus.r
\name{plot_sampn_by_locus}
\alias{plot_sampn_by_locus}
\title{Plot Sample Size by Locus}
\usage{
plot_sampn_by_locus(SampSizeByLocus)
}
\arguments{
\item{SampSizeByLocus}{A data frame with two columns: "silly" and "count". The "silly"
column contains categorical data, and the "count" column contains the count of samples
for each category. This data frame is produced by sampn_by_locus().}
}
\value{
A plotly interactive plot showing a heatmap of the proportion of counts for each
locus relative to the overall sample size.
}
\description{
This function takes a data frame containing information about sample sizes by locus
and creates a heatmap plot to visualize the proportion of counts for each locus
relative to the overall sample size. It uses the \code{plotly} and \code{ggplot2} packages
for plotting.
}
\details{
The function first calculates the proportion of counts for each locus by dividing the
count for each locus by the overall sample size. It then creates a long-format data frame
using the \code{pivot_longer} function from the \code{tidyr} package. The long-format data frame
includes three columns: "silly" (categorical data), "locus" (locus names), and "proportion"
(proportion of counts for each locus). Next, the function performs a full join between the
original data and the \code{silly_n} data, where \code{silly_n} is a function that computes the
overall sample size. The function finally uses the \code{ggplot2} package to create a heatmap
plot with "silly" on the x-axis, "locus" on the y-axis, and the "proportion" mapped to
the fill color.
}
\examples{
\dontrun{
create_locuscontrol(markersuite = "Sockeye2011_96SNPs", username = "awbarclay", password = password)
sillyvec = c("SMCDO03", "SNEVA13")
password = "************"
loki2r(sillyvec = sillyvec, username = "awbarclay", password = password)
remove_ind_miss_loci(sillyvec = sillyvec)

Output <- sampn_by_locus(sillyvec = sillyvec, loci = LocusControl$locusnames)
plot_sampn_by_locus(SampSizeByLocus = Output)
}

}
